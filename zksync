from web3 import Web3
import requests
import time
import json
import random
from loguru import logger
from eth_abi import encode
import sys
sys.path.append("C:/Users/user/Desktop/Scripts/zkSync/NFT")
import cryptograph


logger.add('logs.log', format='{time} {level} {message}', level='DEBUG')

RPC = 'https://zksync2-mainnet.zksync.io'
proxy = 'http://garankinamargo7534:2285c2@15.235.157.30:10279'

List = [
    {'contract_': '0x6c0275Cf081D650617451AC0Fbd80E331C3E18e7',
     'name_NFT': 'zkPrototype' }, #

]



def Mint(privatekey, mint_contract, name_NFT):
    web3 = Web3(Web3.HTTPProvider(RPC, request_kwargs={"proxies": {'SOCKS5': proxy}}))
    account = web3.eth.account.from_key(privatekey)
    wallet_address = web3.to_checksum_address(account.address)

    value = 50000000000000

    method = '0x1249c58b'

    #gasPrice = int(web3.eth.gas_price)

    dict_transaction = {
        'chainId': web3.eth.chain_id,
        'from': wallet_address,
        'value': value,
        # 'gas': 1000000,
        'nonce': web3.eth.get_transaction_count(wallet_address),
        'gasPrice': web3.eth.gas_price,
        # 'maxFeePerGas': 0,
        # 'maxPriorityFeePerGas': 0,
        'data': method,
        'to': web3.to_checksum_address(mint_contract)
    }

    gas_limit = web3.eth.estimate_gas(dict_transaction)
    dict_transaction['gas'] = int(gas_limit)

    transaction = dict_transaction

    signed_txn = web3.eth.account.sign_transaction(transaction, privatekey)

    txn_hash = web3.eth.send_raw_transaction(signed_txn.rawTransaction)

    txn_receipt = web3.eth.wait_for_transaction_receipt(txn_hash.hex())

    if txn_receipt.status == 1:
        logger.success(
            f'>>> Mint {name_NFT} Success!: {wallet_address} | Txn_hash: https://explorer.zksync.io/tx/{txn_hash.hex()}')
    else:
        logger.error(f' Mint {name_NFT} failed txn: {wallet_address} Txn_hash: https://explorer.zksync.io/tx/{txn_hash.hex()}')




if __name__ == '__main__':
    with open("C:/Users/user/Desktop/Scripts/info/privatekey_374", "r") as f:
        key_list = [row.strip() for row in f]

    #random.shuffle(key_list)

    for privatekey in key_list:
        privatekey = cryptograph.out_crypto(privatekey)
        #limit(25)
        data = random.choice(List)
        Mint(privatekey, data['contract_'], data['name_NFT'])
        time.sleep(random.randint(100000, 200000))
